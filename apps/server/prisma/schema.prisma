datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  RETURNED
}

model User {
  id             String        @id @default(uuid())
  email          String        @unique
  firstName      String?
  lastName       String?
  password       String?
  role           Role          @default(USER)
  owns           Organization? @relation(name: "organization_owner")
  ownsId         String?
  organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization_users")
  organizationId String        @map("clientId")
  reservations   Reservation[]
}

model Organization {
  id           String        @id @default(uuid())
  name         String        @unique
  zone         String
  users        User[]        @relation(name: "organization_users")
  categories   Category[]
  catalogItems CatalogItem[]
  owner        User?         @relation(name: "organization_owner", fields: [ownerId], references: [id])
  ownerId      String?       @unique

  @@map("Client")
}

model Category {
  id             String       @id @default(uuid())
  name           String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("clientId")
  itemCatalog    CatalogItem? @relation(fields: [itemCatalogId], references: [id])
  itemCatalogId  String?
}

model CatalogItem {
  id             String       @id @default(uuid())
  name           String
  description    String
  quantity       Int
  organizationId String       @map("clientId")
  organization   Organization @relation(fields: [organizationId], references: [id])
  categories     Category[]
  items          Item[]
}

model Item {
  id            String            @id @default(uuid())
  available     Boolean
  name          String
  picture       String?
  status        String
  itemCatalog   CatalogItem       @relation(fields: [itemCatalogId], references: [id])
  itemCatalogId String
  reservations  ReservationItem[]
}

model ReservationItem {
  id            String      @id @default(uuid())
  itemId        String
  reservationId String
  Item          Item        @relation(fields: [itemId], references: [id])
  Reservation   Reservation @relation(fields: [reservationId], references: [id])
}

model Reservation {
  id        String            @id @default(uuid())
  startDate DateTime
  endDate   DateTime
  status    ReservationStatus @default(PENDING)
  user      User              @relation(fields: [userId], references: [id])
  userId    String
  items     ReservationItem[]
}
